#!/usr/bin/bash
#
# Build the given target.
#
# Author:   Alastair Hughes
# Contact:  < hobbitalastair at yandex dot com >

source "$(dirname "$0")/../../lib/libmain.sh"
source "$(dirname "$0")/../../lib/libtarget.sh"
source "$(dirname "$0")/../../lib/libpackage.sh"

path="${configdir}/src/${target}"
exists "${path}/PKGBUILD" || exit "$?"

# TODO: We should change the build directory if there will not be enough space
#       on the given build dir, or something else should. (build profiling)
basedir="${config[builddir]}/${target}"

extractsrctar() {
    # Find and extract the source tarball.
    local configdir="$1"
    local target="$2"
    local outdir="$3"       # Dir to extract to.

    # Find the source tarball.
    local srctar
    srctar="$(pkgdirsrctar "${configdir}" "${target}")" || \
        error 1 "Failed to find a source tarball for '${target}'!"

    # Extract the source tarball.
    pushd "${outdir}" > /dev/null
    bsdtar -xf "${configdir}/srctar/${srctar}" || \
        error 1 "Failed to extract '${configdir}/srctar/${srctar}' to $(pwd)!"
    # Move the source tarball to a more standard location.
    mv "$(printf "%s" "${srctar}" | rev | cut -d'-' -f3- | rev)" "pkg"
    popd > /dev/null
}

genconfigfiles() {
    # Generate the config files.
    local configdir="$1"
    local target="$2"
    local basedir="$3"

    # Generate the makepkg config file.
    genmakepkgconf "${configdir}" "${target}" >> "${basedir}/etc/makepkg.conf"
    printf "unset BUILDDIR" >> "${basedir}/etc/makepkg.conf"

    # Add the pacman config file.
    cat > "${basedir}/etc/pacman.conf" << EOF
EOF

    # Create the pacman wrapper.
    local wrapper="/usr/bin/pacman"
    if [ "${target%%/*}" == "packages" ]; then
        # TODO: Make this more generic?
        # We need this when cross compiling; makepkg doesn't know where it
        # should look, so the dependency checks fail.
        wrapper="/usr/bin/sysroot-pacman"
        cat > "${basedir}${wrapper}" << EOF
#!/usr/bin/sh
# Wrapper for pacman; use the correct system root.
pacman --root /sysroot "\$@"
EOF
        chmod +x "${basedir}/${wrapper}"
    fi

    # Create the build script.
    cat > "${basedir}/build.sh" << EOF
#!/usr/bin/bash
# Automatically generated build script - do not modify!
set -e
export PATH="/opt/${config[triplet]}/bin:${PATH}"
cd "pkg"
PACMAN='${wrapper}' makepkg
EOF
    chmod +x "${basedir}/build.sh"
}

buildpackage() {
    # Build the package.
    local basedir="$1"
    local prefix="$2"

    message info "Building the package..."

    if [ "${prefix}" == "native" ]; then
        # Native packages are different; we currently just use QEMU.

        # Try with KVM first, then fall back on non-kvm.
        qemupackage "${basedir}" -enable-kvm || \
        qemupackage "${basedir}" || \
            error "$?" "Running qemu failed!"

        # Check that everything worked.
        if [ ! -f "${basedir}/build.log" ]; then
            error 1 "QEMU did not boot; no log at '${basedir}/build.log!'"
        elif [ "$(tail -n 1 "${basedir}/build.log")" != "Success!" ]; then
            error 2 "Build failed - see '${basedir}/build.log'!"
        fi
    else
        # TODO: Find a better fakechroot alternative?
        fakechroot chroot "${basedir}" /build.sh || \
            error "$?" "Running makepkg failed!"
    fi
}

qemupackage() {
    # Run QEMU to build the package.
    local basedir="$1"
    shift

    # TODO: Remove build fixes; these should be fixed elsewhere.
    cat > "${basedir}/run.sh" << EOF
#!/usr/bin/sh

mount -t proc proc /proc
mount -t sysfs sys /sys

# Misc fixes.
ln -s /proc/self/fd /dev/fd
chmod +s /usr/bin/busybox
sed -i /usr/bin/makepkg -e 's:--apparent-size::'

# chmod the build directory.
chgrp -R nobody /pkg
chmod g+ws /pkg

# Clean the build dir.
rm -rf /pkg/{src,pkg}

# Run the build script as 'nobody'.
su nobody -s /usr/bin/sh -c /build.sh > /build.log && \
    echo 'Success!' >> build.log
EOF
    chmod +x "${basedir}/run.sh"

    local tag="dev"
    local mem=128 # TODO: How much RAM is enough? (build profiling required)

    # Generate the script.
    message info "Writing qemu script"
    rm -f "${basedir}/qemu.sh"
    cat > "${basedir}/qemu.sh" << EOF
#!/usr/bin/sh
init="\$1"
shift

fakeroot "qemu-system-${config[arch_alias]}" "\$@" \
    -kernel "${basedir}/boot/vmlinuz" \
    -append "console=ttyS0 init=\${init} panic=1 rootfstype=9p rw rootflags=trans=virtio,version=9p2000.L" \
    -fsdev local,id=${tag},security_model=passthrough,path=${basedir} \
    -device virtio-9p-pci,fsdev=${tag},mount_tag=/dev/root \
    -m "${mem}" \
    -no-reboot -nographic
exit "\$?"
EOF
    chmod +x "${basedir}/qemu.sh"
    
    # Run qemu and exit.
    message info "Running qemu with extra args '$@'"
    "${basedir}/qemu.sh" "/run.sh" "$@"
    return "$?"
}


# Prepare the sysroot.
# Create the base dir.
if [ -e "${basedir}" ]; then
    error 1 "Build dir '${basedir}' already exists!"
fi
mkdir -p "${basedir}" || error 1 "Failed to create build dir '${basedir}'!"
# Populate the sysroot.
message info "Populating the sysroot..."
installdeps "${configdir}" "${target}" "${basedir}"
# Extract the source tarball.
message info "Unpacking the source tarball..."
extractsrctar "${configdir}" "${target}" "${basedir}"
# Generate the config files.
message info "Generating the config files..."
genconfigfiles "${configdir}" "${target}" "${basedir}"

# Build the package.
buildpackage "${basedir}" "${prefix}"

# Copy the built packages into the pkg dir.
cp "${basedir}"/pkg/*.pkg.tar.* "${configdir}/pkgs/" || \
    error 1 "No packages generated!"

# Clean up the build dir.
message info "Cleaning up..."
rm -rf "${basedir}"
exit 0
