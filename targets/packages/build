#!/usr/bin/bash
#
# Build the given target.
#
# Author:   Alastair Hughes
# Contact:  < hobbitalastair at yandex dot com >

source "$(dirname "$0")/../../lib/libmain.sh"
source "$(dirname "$0")/../../lib/libtarget.sh"
source "$(dirname "$0")/../../lib/libpackage.sh"
source "$(dirname "$0")/../../lib/libboot.sh"

path="${configdir}/src/${target}"
exists "${path}/PKGBUILD" || exit "$?"

# TODO: Automatically pick a dir with enough space (#profile)
basedir="${config[builddir]}/${target}" 

extractsrctar() {
    # Find and extract the source tarball.
    local configdir="$1"
    local target="$2"
    local outdir="$3"       # Dir to extract to.

    # Find the source tarball.
    local srctar
    srctar="$(pkgdirsrctar "${configdir}" "${target}")" || \
        error 1 "Failed to find a source tarball for '${target}'!"

    # Extract the source tarball.
    pushd "${outdir}" > /dev/null
    bsdtar -xf "${srctar}" || \
        error 1 "Failed to extract '${srctar}' to $(pwd)!"
    # Move the source tarball to a more standard location.
    mv "$(printf "%s" "${srctar##*/}" | rev | cut -d'-' -f3- | rev)" "pkg"
    popd > /dev/null
}

buildpackage() {
    # Build the package.
    local configdir="$1"
    local basedir="$2"
    local prefix="$3"

    message info "Building the package..."

    if [ "${prefix}" == "native" ]; then
        # Native packages are different; we currently just use QEMU.

        # Generate the fstab and default hostname.
        genfstab "${basedir}"
        gendefhostname "${basedir}"

        # Generate the init scripts.
        geninitscript "${basedir}" "/etc/init/run.sh"
        # TODO: Remove build fixes; these should be fixed elsewhere.
        cat > "${basedir}/etc/init/run.sh" << EOF
#!/usr/bin/sh

# Misc fixes.
chmod +s /usr/bin/busybox
sed -i /usr/bin/makepkg -e 's:--apparent-size::'

# chmod the build directory.
chgrp -R nobody /pkg
chmod g+ws /pkg

# Clean the build dir.
rm -rf /pkg/{src,pkg}

# Run the build script as 'nobody'.
cd /pkg && \
    su nobody -s /usr/bin/sh -c '/usr/bin/bash -l makepkg' && \
    echo 'Success!' > /build.log
EOF
        chmod +x "${basedir}/etc/init/run.sh"

        # Generate the qemu script.
        # TODO: How much RAM is enough? (#profile)
        genqemuscript "${basedir}" 128

        # Try with KVM first, then fall back on non-kvm.
        "${basedir}/qemu.sh" -enable-kvm || \
        "${basedir}/qemu.sh" || \
            error "$?" "Running qemu failed!"

        # Check that everything worked.
        if [ ! -f "${basedir}/build.log" ] || \
            [ "$(tail -n 1 "${basedir}/build.log")" != "Success!" ]; then
            error 2 "Build failed! (no success marker)"
        fi
    else
        # For cross-compiled packages, we override the defaults.

        # Generate the makepkg config file.
        genmakepkgconf "${configdir}" "${target}" >> \
            "${basedir}/etc/makepkg.conf"
        printf "unset BUILDDIR" >> "${basedir}/etc/makepkg.conf"

        # Empty the pacman config file.
        cat > "${basedir}/etc/pacman.conf" << EOF
EOF

        # Create the pacman wrapper.
        local wrapper="/usr/bin/pacman"
        if [ "${target%%/*}" == "packages" ]; then
            # TODO: Make this more generic? (#pkgdir)
            # We need this when cross compiling; makepkg doesn't know where it
            # should look, so the dependency checks fail.
            wrapper="/usr/bin/sysroot-pacman"
            cat > "${basedir}${wrapper}" << EOF
#!/usr/bin/sh
# Wrapper for pacman; use the correct system root.
pacman --root /sysroot "\$@"
EOF
            chmod +x "${basedir}/${wrapper}"
        fi

        # Create the build script.
        cat > "${basedir}/build.sh" << EOF
#!/usr/bin/bash
# Automatically generated build script - do not modify!
set -e
cd "/pkg"
PACMAN='${wrapper}' makepkg
EOF
        chmod +x "${basedir}/build.sh"

        # TODO: We need the path, otherwise depcomp fails in the gcc build
        #       (only for some architectures, though!)
        # TODO: Find a better fakechroot alternative?
        PATH="${basedir}/opt/${config[triplet]}/bin:/usr/bin" \
            fakechroot chroot "${basedir}" /build.sh || \
            error "$?" "Running makepkg failed!"
    fi
}

# Prepare the sysroot.
# Create the base dir.
if [ -e "${basedir}" ]; then
    error 1 "Build dir '${basedir}' already exists!"
fi
mkdir -p "${basedir}" || error 1 "Failed to create build dir '${basedir}'!"
# Populate the sysroot.
message info "Populating the sysroot..."
installdeps "${configdir}" "${target}" "${basedir}" \
    "$(dirname "$0")/../../scripts/lsdeps.sh"
# Extract the source tarball.
message info "Unpacking the source tarball..."
extractsrctar "${configdir}" "${target}" "${basedir}"

# Build the package.
buildpackage "${configdir}" "${basedir}" "${prefix}"

# Copy the built packages into the pkg dir.
cp "${basedir}"/pkg/*.pkg.tar.* "${configdir}/pkgs/" || \
    error 1 "No packages generated!"

# Clean up the build dir.
message info "Cleaning up..."
rm -rf "${basedir}"
exit 0
